i    : type.
o    : type.

⊃    : o -> o -> o.                                          %infix right 10 ⊃.
∧    : o -> o -> o.                                          %infix none  9  ∧.
⊤    : o.
% ∨    : o -> o -> o.                                          %infix none  8  ∨.
% ⊥    : o.

hyp  : o -> type. %prefix 3 hyp.
conc : o -> type. %prefix 3 conc.

init : hyp P -> conc P.

∧-right : conc A -> conc B -> conc A ∧ B.
∧-left  : (hyp A -> hyp B -> conc C) -> (hyp A ∧ B -> conc C).

⊤-right   : conc ⊤.

⊃-right   : (hyp A -> conc B) -> conc A ⊃ B.
⊃-left    : conc A -> (hyp B -> conc C)
         -> (hyp A ⊃ B -> conc C).

admits-cut : {A:o} conc A -> (hyp A -> conc C) -> conc C -> type.
% mode admits-cut +A +D +E -F.

case-A-init :
  admits-cut
    A
    ((init (D : hyp A)) : conc A)
    (E : hyp A -> conc A)
    (E D).

case-E-init :
  admits-cut
    A
    (D : conc A)
    ([h:hyp A] init h)
    (D : conc A).
