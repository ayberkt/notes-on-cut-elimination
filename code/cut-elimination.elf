i    : type.
o    : type.

⊃    : o -> o -> o.                                          %infix right 10 ⊃.
∧    : o -> o -> o.                                          %infix none  9  ∧.
⊤    : o.
% ∨    : o -> o -> o.                                          %infix none  8  ∨.
% ⊥    : o.

hyp  : o -> type. %prefix 3 hyp.
conc : o -> type. %prefix 3 conc.

init : hyp P -> conc P.

∧-right : conc A -> conc B -> conc A ∧ B.
∧-left  : (hyp A -> hyp B -> conc C) -> (hyp A ∧ B -> conc C).

⊤-right   : conc ⊤.

⊃-right   : (hyp A -> conc B) -> conc A ⊃ B.
⊃-left    : conc A -> (hyp B -> conc C)
         -> (hyp A ⊃ B -> conc C).

admits-cut : {A:o} conc A -> (hyp A -> conc C) -> conc C -> type.
% mode admits-cut +A +D +E -F.

%% D is initial sequent
init-D   : admits-cut P (init (D : hyp P) : conc P) E (E D).
%% E is an initial sequent that uses the cut formula P.
init-E-1 : admits-cut P (D : conc P) (init : hyp P -> conc P) D.
%% E is an initial sequent but it concludes C using some other thing from the
%% context. In this case we know that E' does not depend on the hypothesis P
%% so we just strengthen it by getting rid of the dependency.
init-E-1 : admits-cut P D ([_:hyp P] (E' : conc C)) E'.
